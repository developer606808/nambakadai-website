generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                    @id @default(autoincrement())
  name                   String
  email                  String                 @unique
  password               String
  role                   Role                   @default(USER)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  emailVerified          DateTime?
  image                  String?
  isVerified             Boolean                @default(false)
  is_active              Boolean                @default(true)

  accounts               Account[]
  sessions               Session[]
  orders                 Order[]
  reviews                Review[]
  store                  Store?
  addresses              Address[]
  passwordResetToken     PasswordResetToken[]
  emailVerificationToken EmailVerificationToken[]
  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  communities            CommunityMember[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  storeId     Int
  store       Store     @relation(fields: [storeId], references: [id])
  orderItems  OrderItem[]
  reviews     Review[]
  images      String[]
}

model Category {
  id          Int          @id @default(autoincrement())
  name_en     String       @map("name_en") @db.VarChar(255)
  name_ta     String?      @map("name_ta") @db.VarChar(255)
  slug        String       @unique @db.VarChar(255)
  description String?      @db.Text
  icon        String?      @db.VarChar(255)
  image_url   String?      @map("image_url") @db.VarChar(255)
  is_active   Boolean      @default(true) @map("is_active")
  sort_order  Int          @default(0) @map("sort_order") @db.Integer
  created_at  DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  type        CategoryType @default(PRODUCT)

  products    Product[]
  rentalProducts RentalProduct[]
  category_units CategoryUnit[]

  @@map("category")
}

model Unit {
  id              Int       @id @default(autoincrement())
  unitName_en     String    @map("unitName_en") @db.VarChar(255)
  abbreviation_en String    @unique @map("abbreviation_en") @db.VarChar(50)
  unitName_ta     String    @map("unitName_ta") @db.VarChar(255)
  abbreviation_ta String    @unique @map("abbreviation_ta") @db.VarChar(50)
  createdAt       DateTime  @default(now()) @map("createdAt") @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @map("updatedAt") @db.Timestamptz(6)
  isDeleted       Boolean   @default(false) @map("isDeleted")
  isPublish       Boolean   @default(true) @map("isPublish")

  category_units CategoryUnit[]

  @@map("units")
}

model CategoryUnit {
  category_id Int      @map("category_id") @db.Integer
  unit_id     Int      @map("unit_id") @db.Integer

  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  unit        Unit     @relation(fields: [unit_id], references: [id], onDelete: Cascade)

  @@id([category_id, unit_id])
  @@map("category_units")
}

model Order {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  status    OrderStatus @default(PENDING)
  total     Float
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Store {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String
  ownerId     Int       @unique
  owner       User      @relation(fields: [ownerId], references: [id])
  products    Product[]
  rentalProducts   RentalProduct[]
  logoUrl     String?
  bannerUrl   String?
  contactName  String?
  contactPhone String?
  contactEmail String?
  address      String?
  stateId      Int?
  cityId       Int?
  pincode      String?
  state       State?    @relation(fields: [stateId], references: [id])
  city        City?     @relation(fields: [cityId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isApproved  Boolean   @default(false)
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Address {
  id        Int    @id @default(autoincrement())
  street    String
  city      String
  stateId   Int
  state     State  @relation(fields: [stateId], references: [id])
  cityId    Int
  city_rel  City   @relation(fields: [cityId], references: [id])
  zip       String
  country   String
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
  likes       Like[]
  communityId Int?
  community   Community? @relation(fields: [communityId], references: [id])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  postId    Int
  post      Post      @relation(fields: [postId], references: [id])
  likes     Like[]
}

model Like {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  postId    Int?
  post      Post?     @relation(fields: [postId], references: [id])
  commentId Int?
  comment   Comment?  @relation(fields: [commentId], references: [id])

  @@unique([authorId, postId, commentId])
}

model Community {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  image       String?
  category    String
  privacy     String    @default("public") // "public" or "private"
  location    String?
  rules       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  members     CommunityMember[]
  posts       Post[] // Communities can have posts
}

model CommunityMember {
  id          Int       @id @default(autoincrement())
  communityId Int
  userId      Int
  joinedAt    DateTime  @default(now())

  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([communityId, userId])
}

model State {
  id          Int       @id @default(autoincrement())
  name_en     String    @map("name_en") @db.VarChar(255)
  stateCode   String    @map("stateCode") @db.VarChar(50)
  name_ta     String?   @map("name_ta") @db.VarChar(255)

  cities      City[]
  addresses   Address[]
  stores      Store[]

  @@map("states")
}

model City {
  id          Int       @id @default(autoincrement())
  name_en     String    @map("name_en") @db.VarChar(255)
  name_ta     String?   @map("name_ta") @db.VarChar(255)
  state_id    Int       @map("state_id") @db.Integer
  is_active   Boolean   @default(true) @map("is_active")
  sort_order  Int       @default(0) @map("sort_order") @db.Integer

  state       State     @relation(fields: [state_id], references: [id])
  addresses   Address[]
  stores      Store[]

  @@map("cities")
}

model RentalProduct {
  id                Int       @id @default(autoincrement())
  name              String
  description       String?
  rentalRate        Float
  rentalUnit        String
  availabilityStart DateTime?
  availabilityEnd   DateTime?
  depositAmount     Float?
  images            String[]
  categoryId        Int
  category          Category  @relation(fields: [categoryId], references: [id])
  storeId           Int
  store             Store     @relation(fields: [storeId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Banner {
  id          Int       @id @default(autoincrement())
  title       String
  imageUrl    String
  linkUrl     String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("banners")
}

enum Role {
  USER
  ADMIN
  SELLER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum CategoryType {
  PRODUCT
  RENTAL
  BOTH
}

enum Privacy {
  PUBLIC
  PRIVATE
}